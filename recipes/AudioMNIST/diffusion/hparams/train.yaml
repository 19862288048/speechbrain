# #################################
# Basic training parameters for a spectrogram-based
# diffusion model
#
# Author:
#  * Artem Ploujnikov 2022
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

data_folder: ./data
output_folder: !ref ./results/diffusion/<seed>
save_folder: !ref <output_folder>/save
sample_folder: !ref <output_folder>/samples
train_log: !ref <output_folder>/train_log.txt

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

ckpt_interval_minutes: 15 # save checkpoint every N min

# Feature parameters
n_mels: 80

# Training Parameters
dataset: flexthink/audiomnist
sample_rate_src: 48000
sample_rate_tgt: 22050
number_of_epochs: 35
batch_size: 16
lr_start: 0.001
max_grad_norm: 1.
lr_warmup_steps: 500
train_timesteps: 1000
adam_beta1: 0.95
adam_beta2: 0.999
adam_weight_decay: 0.000001
adam_epsilon: 0.00000001
downsample_factor: 16
enable_train_metrics: True
enable_reference_samples: True
train_log_interval: 10
overfit_test: False
overfit_test_sample_count: 1
overfit_test_epoch_data_count: 1000
train_data_count: null
dataloader_options:
    batch_size: !ref <batch_size>
use_tensorboard: True
tensorboard_logs: !ref <output_folder>/logs/


# Spectrogram Parameters
spec_n_fft: 1024
spec_f_min: 0
spec_f_max: 8000
spec_n_mels: 80
spec_power: 1
spec_ref: 10.0
spec_hop_length: 256
spec_win_length: 1024
spec_norm: "slaney"
spec_mel_scale: "slaney"
spec_norm_mean: 0.
spec_norm_std: 1.
spec_sample_size: 80
min_level_db: -80.0
pad_level_db: -50.

# Vocoder Settings
vocoder_model: speechbrain/tts-hifigan-ljspeech

# Evaluation Parameters
eval_num_samples: 10
eval_generate_audio: True
eval_show_progress: True

# Feature extraction
compute_features: !new:speechbrain.nnet.containers.Sequential
    spec: !new:torchaudio.transforms.MelSpectrogram
        n_fft: !ref <spec_n_fft>
        f_min: !ref <spec_f_min>
        f_max: !ref <spec_f_max>
        n_mels: !ref <spec_n_mels>
        power: !ref <spec_power>
        hop_length: !ref <spec_hop_length>
        win_length: !ref <spec_win_length>
        norm: !ref <spec_norm>
        mel_scale: !ref <spec_mel_scale>
    amp2db: !new:torchaudio.transforms.AmplitudeToDB

min_level_norm: !new:custom_transforms.MinLevelNorm
    min_level_db: !ref <min_level_db>

global_norm: !new:custom_transforms.GlobalNorm
    norm_mean: !ref <spec_norm_mean>
    norm_std: !ref <spec_norm_std>

dynamic_range_compression: !new:custom_transforms.DynamicRangeCompression

compute_cost: !name:speechbrain.nnet.losses.mse_loss


# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.
unet: !new:speechbrain.nnet.unet.UNetModel
  in_channels: 1
  model_channels: 64
  out_channels: 1
  num_res_blocks: 4
  attention_resolutions: [32, 16, 8]

noise: !new:speechbrain.nnet.diffusion.LengthMaskedGaussianNoise

diffusion: !new:speechbrain.nnet.diffusion.DenoisingDiffusion
    model: !ref <unet>
    timesteps: !ref <train_timesteps>
    noise: !ref <noise>
    show_progress: !ref <eval_show_progress>
    sample_min: -4.7
    sample_max: 3.

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

vocoder: !name:speechbrain.pretrained.interfaces.HIFIGAN.from_hparams
    source: !ref <vocoder_model>


# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    unet: !ref <unet>
    diffusion: !ref <diffusion>
    compute_features: !ref <compute_features>
    dynamic_range_compression: !ref <dynamic_range_compression>
    min_level_norm: !ref <min_level_norm>
    global_norm: !ref <global_norm>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.AdamW
    lr: !ref <lr_start>
    betas: !ref (<adam_beta1>, <adam_beta2>)
    weight_decay: !ref <adam_weight_decay>
    eps: !ref <adam_epsilon>

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.CyclicCosineScheduler
    lr_initial: !ref <lr_start>
    n_warmup_steps: !ref <lr_warmup_steps>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        unet: !ref <unet>
        counter: !ref <epoch_counter>
