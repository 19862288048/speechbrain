###################################################
# Classification of imagined movements (right hand, left hand, feet, tongue) of BNCI2014001 MOABB dataset using EEGNet.
# EEGNet from https://doi.org/10.1088/1741-2552/aace8c.
# BNCI2014001 from https://doi.org/10.3389/fnins.2012.00055.
#
# Author
# ------
# Davide Borra, 2022
# Mirco Ravanelli, 2022
# Francesco Paissan, 2022
###################################################
seed: 1234
__set_torchseed: !apply:torch.manual_seed [!ref <seed>]

# DIRECTORIES
data_folder: !PLACEHOLDER  #'/path/to/BNCI2014001'. The dataset will be automatically downloaded in this folder
output_folder: !ref results/MOABB/ShallowConvNET_BNCI2014001/<seed>

# DATASET HPARS
# Defining the MOABB dataset.
dataset: !new:moabb.datasets.BNCI2014001
subject_list: [1, 2, 3, 4, 5, 6, 7, 8, 9]  # subject list

events: ['left_hand', 'right_hand', 'feet', 'tongue']
n_classes: 4
sample_rate: 128  # Target sampling rate (Hz)
# tmin, tmax respect to stimulus onset that define the interval attribute of the dataset class
# trial begins (0 s), cue (2 s, 1.25 s long); each trial is 6 s long
# dataset interval starts from 2
# -->tmin tmax are referred to this start value (e.g., tmin=0.5 corresponds to 2.5 s)
tmin: 0.5
tmax: 2.5
T: !ref <sample_rate> * (<tmax> - <tmin>)
# fmin, fmax band-pass filtering
fmin: 4
fmax: 40
channels: ['Fz', 'FC3', 'FC1', 'FCz', 'FC2', 'FC4',
           'C5', 'C3', 'C1', 'Cz', 'C2', 'C4',
           'C6', 'CP3', 'CP1', 'CPz', 'CP2', 'CP4',
           'P1', 'Pz', 'P2', 'POz']
C: 22
# Defining the MOABB paradigm and setting the pre-processing hyper-parameters for the specific dataset.
paradigm: !new:moabb.paradigms.MotorImagery
    events: !ref <events>
    n_classes: !ref <n_classes>
    fmin: !ref <fmin>
    fmax: !ref <fmax>
    tmin: !ref <tmin>
    tmax: !ref <tmax>
    channels: !ref <channels>
    resample: !ref <sample_rate>

# TRAINING HPARS
num_parallel_processes: 6  # number of parallel processes to run
nfolds: 4 # number of cross-validation folds (only for within_session_it, cross_session_it)
number_of_epochs: 700 # number of training epochs
lr: 0.001

# Learning rate scheduling (cyclic learning rate is used here)
max_lr: !ref <lr> # Upper bound of the cycle (max value of the lr)
base_lr: 0.00000001 # Lower bound in the cycle (min value of the lr)
step_size: 50 # number of training iterations per half cycle (lower step_size => faster cycles)

# We here specify how to perfom test:
# - If test_with: 'last' we perform test with the latest model.
# - if test_with: 'best, we perform test with the best model (according to the metric specified in test_key)
# The variable avg_models can be used to average the parameters of the last (or best) N saved models before testing.
# This can have a regularization effect. If avg_models: 1, the last (or best) model is used directly.
test_with: 'last' # 'last' or 'best'
test_key: "acc" # Possible opts: "loss", "f1", "auc", "acc"
avg_models: 5 # checkpoints to average

f1: !name:sklearn.metrics.f1_score
    average: 'macro'
acc: !name:sklearn.metrics.balanced_accuracy_score
cm: !name:sklearn.metrics.confusion_matrix
metrics:
    f1: !ref <f1>
    acc: !ref <acc>
    cm: !ref <cm>

loss: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: 0.0

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter  # epoch counter
    limit: !ref <number_of_epochs>
batch_size: 128
valid_ratio: 0.2

# Data iterators
within_session_it: !new:recipes.MOABB.dataio_iterators.WithinSession
    paradigm: !ref <paradigm>
    nfolds: !ref <nfolds>
    seed: !ref <seed>
leave_one_session_out_it: !new:recipes.MOABB.dataio_iterators.LeaveOneSessionOut
    paradigm: !ref <paradigm>
    seed: !ref <seed>
cross_session_it: !new:recipes.MOABB.dataio_iterators.CrossSession
    paradigm: !ref <paradigm>
    nfolds: !ref <nfolds>
    seed: !ref <seed>
leave_one_subject_out_it: !new:recipes.MOABB.dataio_iterators.LeaveOneSubjectOut
    paradigm: !ref <paradigm>
    seed: !ref <seed>
data_iterators: [!ref <within_session_it>,
                 !ref <leave_one_session_out_it>,
                 !ref <cross_session_it>,
                 !ref <leave_one_subject_out_it>,
    ]

# DATA AUGMENTATION
rand_amp: !new:speechbrain.processing.speech_augmentation.RandAmp
    amp_low: 0.5
    amp_high: 1.5

time_shift: !new:speechbrain.processing.speech_augmentation.RandomShift
    min_shift: -1500
    max_shift: 1500
    dim: 1

chunk_dropper: !new:speechbrain.processing.speech_augmentation.FastDropChunk
    drop_length_low: 10
    drop_length_high: 25
    drop_count_low: 1
    drop_count_high: 3
    drop_start: 0

pink_noise_funct: !name:speechbrain.processing.speech_augmentation.pink_noise_like
    alpha_low: 0.5
    alpha_high: 0.5
    sample_rate: !ref <sample_rate>

muscular_noise_funct: !name:speechbrain.processing.speech_augmentation.muscolar_noise
     pink_alpha_low: 1.110
     pink_alpha_high: 1.432
     bb_offset_low: 3.072
     bb_offset_high: 5.686
     sample_rate: !ref <sample_rate>

snr_pink_low: -5.0
snr_pink_high: 10
snr_white_low: 10
snr_white_high: 25
snr_muscular_low: 25
snr_muscular_high: 25

n_augmentations: 3
repeat_augment: 1

add_noise_pink: !new:speechbrain.processing.speech_augmentation.AddNoise
    snr_low: !ref <snr_pink_low>
    snr_high: !ref <snr_pink_high>
    noise_funct: !ref <pink_noise_funct>

add_noise_white: !new:speechbrain.processing.speech_augmentation.AddNoise
    snr_low: !ref <snr_white_low>
    snr_high: !ref <snr_white_high>

add_muscular_noise: !new:speechbrain.processing.speech_augmentation.AddNoise
    snr_low: !ref <snr_muscular_low>
    snr_high: !ref <snr_muscular_high>
    noise_funct: !ref <muscular_noise_funct>


augment_noise: !new:speechbrain.processing.augmentation.Augmenter
    parallel_augment: False
    concat_original: False
    min_augmentations: 2
    max_augmentations: 2
    repeat_augment: 1
    shuffle_augmentations: True
    add_noise_pink: !ref <add_noise_pink>
    add_noise_white: !ref <add_noise_white>

augment: !new:speechbrain.processing.augmentation.Augmenter
    parallel_augment: True
    concat_original: True
    min_augmentations: !ref <n_augmentations>
    max_augmentations: !ref <n_augmentations>
    repeat_augment: !ref <repeat_augment>
    shuffle_augmentations: True
    rand_amp: !ref <rand_amp>
    time_shift: !ref <time_shift>
    chunk_dropper: !ref <chunk_dropper>
    augment_noise: !ref <augment_noise>
    add_muscular_noise: !ref <add_muscular_noise>

# DATA NORMALIZATION
normalize: !name:speechbrain.processing.signal_processing.mean_std_norm
    dims: 2

# MODEL: SHALLOWCONVNET
input_shape: [null, !ref <T>, !ref <C>, null]
cnn_temporal_kernels: 40  # number of temporal filters in the temporal conv. layer
cnn_spatial_kernels: 40  # number of spatial filters in the spatial conv. layer
cnn_temporal_kernelsize: 13
poolsize: 37
poolstride: 20
dropout: 0.35  # dropout rate

model: !new:speechbrain.lobes.models.ShallowConvNet.ShallowConvNet
  input_shape: !ref <input_shape>
  cnn_temporal_kernels: !ref <cnn_temporal_kernels>
  cnn_spatial_kernels: !ref <cnn_spatial_kernels>
  cnn_temporal_kernelsize: [!ref <cnn_temporal_kernelsize>, 1]
  poolsize: [!ref <poolsize>, 1]
  poolstride: [!ref <poolstride>, 1]
  dense_n_neurons: !ref <n_classes>
  dropout: !ref <dropout>

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>
