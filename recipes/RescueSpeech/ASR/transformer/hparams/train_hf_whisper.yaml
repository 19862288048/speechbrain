# ################################
# Model: Whisper (Encoder-Decoder) + NLL
# Augmentation: TimeDomainSpecAugment
# Authors: Sangeet Sagar 2022
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 8200
__set_seed: !apply:torch.manual_seed [!ref <seed>]
dataset: !ref RescueSpeech
output_folder: !ref results/train_whisper/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the biggest Fairseq english whisper model.
model_version: !ref large-v2
whisper_hub: !PLACEHOLDER # !ref ../../pre-trained/openai-whisper-<model_version>/
whisper_folder: !PLACEHOLDER #!ref ../../pre-trained/openai-whisper-<model_version>/
language: german

# For inference
# pretrained_whisper_model: !PLACEHOLDER # clean trained
# pretrained_whisper_model: !PLACEHOLDER # clean noisy mix trained

# Normalize the english inputs with
# the same normalization done in the paper
normalized_transcripts: True
test_only: False # Set it to True if you only want to  do the evaluation

# Data files
# Dataset prep parameters
data_folder: !PLACEHOLDER # !ref ../../dataset
csv_dir: !ref ../../csv_files/Task_ASR
train_tsv_file: !ref <data_folder>/train.tsv
dev_tsv_file: !ref <data_folder>/dev.tsv
test_tsv_file: !ref <data_folder>/test.tsv
accented_letters: True
train_csv: !ref <csv_dir>/train.csv
valid_csv: !ref <csv_dir>/dev.csv
test_csv: !ref <csv_dir>/test.csv
skip_prep: False

# Training parameters
# when training: input_type- clean_wav/clean_noisy_mix
# when inferring: input_type- clean_wav/noisy_wav
input_type: clean_wav
number_of_epochs: 5
lr_whisper: 0.00003
sorting: ascending
auto_mix_prec: False
sample_rate: 16000
ckpt_interval_minutes: 30

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
batch_size: 2
test_batch_size: 2

# These values are only used for the searchers.
# They needs to be hardcoded and should not be changed with Whisper.
# They are used as part of the searching process.
# The bos token of the searcher will be timestamp_index
# and will be concatenated with the bos, language and task tokens.
timestamp_index: 50363
eos_index: 50257
bos_index: 50258

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
test_beam_size: 8

# Model parameters
freeze_whisper: False


train_loader_kwargs:
    batch_size: !ref <batch_size>

valid_loader_kwargs:
    batch_size: !ref <batch_size>

test_loader_kwargs:
    batch_size: !ref <test_batch_size>


#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

whisper: !new:speechbrain.lobes.models.huggingface_whisper.HuggingFaceWhisper
    source: !ref <whisper_hub>
    freeze: !ref <freeze_whisper>
    save_path: !ref <whisper_folder>
    encoder_only: False
    freeze_encoder: False

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

nll_loss: !name:speechbrain.nnet.losses.nll_loss

modules:
    whisper: !ref <whisper>

whisper_opt_class: !name:torch.optim.AdamW
    lr: !ref <lr_whisper>
    weight_decay: 0.01

valid_greedy_searcher: !new:speechbrain.decoders.seq2seq.S2SWhisperGreedySearch
    model: !ref <whisper>
    bos_index: !ref <timestamp_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>

test_beam_searcher: !new:speechbrain.decoders.seq2seq.S2SWhisperBeamSearch
    module: [!ref <whisper>]
    bos_index: !ref <timestamp_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>

lr_annealing_whisper: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_whisper>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0

# Change the path to use a local model instead of the remote one
# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#     collect_in: !ref <save_folder>
#     loadables:
#         whisper: !ref <whisper>
#     paths:
#         whisper: !ref <pretrained_whisper_model>/whisper.ckpt

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        whisper: !ref <whisper>
        scheduler_whisper: !ref <lr_annealing_whisper>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True
