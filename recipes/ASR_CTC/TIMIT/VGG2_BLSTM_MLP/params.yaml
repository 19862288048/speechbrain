constants:
    output_folder: exp/CTC/TIMIT_VGG2_BSLTM_MLP
    data_file: /home/peter/Downloads/TIMIT.tar.gz
    local_folder: /tmp/timit
    save_folder: !ref <constants.output_folder>/save
    ckpts_to_keep: 1
    sample_rate: 16000
    seed: 1234

    # Data files
    csv_train: !ref <constants.local_folder>/train.csv
    csv_valid: !ref <constants.local_folder>/dev.csv
    csv_test: !ref <constants.local_folder>/test.csv

    # Neural Parameters
    N_epochs: 25
    batch_size: 8
    lr: 1.0
    dropout_rate: 0.15

saveables:
    model: !speechbrain.lobes.models.CRDNN.CRDNN
        output_size: 40 # 39 phonemes + 1 blank symbol
        cnn_blocks: 2
        dnn_blocks: 2
    optimizer: !speechbrain.nnet.optimizers.optimize
        do_recovery: True
        optimizer_type: adadelta
        rho: 0.95
        learning_rate: !ref <constants.lr>
    lr_annealing: !speechbrain.nnet.lr_scheduling.lr_annealing
        annealing_type: newbob
        N_epochs: !ref <constants.N_epochs>
        lr_initial: !ref <constants.lr>
        improvement_threshold: 0.0025
        annealing_factor: 0.8
        patient: 0
    epoch_counter: !speechbrain.utils.epoch_loop.EpochCounter
        limit: !ref <constants.N_epochs>

functions:
    copy_locally: !speechbrain.data_io.data_preparation.copy_data_locally
        data_file: !ref <constants.data_file>
        local_folder: !ref <constants.local_folder>
    prepare_timit: !speechbrain.data_io.data_preparation.timit_prepare
        data_folder: !ref <constants.local_folder>
        splits: [train, dev, test]
        save_folder: !ref <constants.local_folder>
    compute_features: !speechbrain.lobes.features.Features
        feature_type: fbank
        deltas: False
        context: False
        requires_grad: False
        constants:
            n_mels: 40
    train_loader: !speechbrain.data_io.data_io.create_dataloader &loader
        csv_file: !ref <constants.csv_train>
        batch_size: !ref <constants.batch_size>
        sentence_sorting: ascending
        output_folder: !ref <constants.output_folder>
        csv_read: [wav, phn]
    valid_loader: !speechbrain.data_io.data_io.create_dataloader
        <<: *loader
        csv_file: !ref <constants.csv_valid>
    test_loader: !speechbrain.data_io.data_io.create_dataloader
        <<: *loader
        csv_file: !ref <constants.csv_test>
        batch_size: 1
    compute_cost: !speechbrain.nnet.losses.compute_cost
        cost_type: [ctc]
    compute_cost_wer: !speechbrain.nnet.losses.compute_cost
        cost_type: [ctc, wer]
