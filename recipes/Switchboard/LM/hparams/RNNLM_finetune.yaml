# ############################################################################
# Model: RNNLM of E2E ASR
# Tokens: unigram
# losses: NLL
# Training: Librispeech 960h transcript + LM corpus
# Authors:  Ju-Chieh Chou 2020, Jianyuan Zhong 2021
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1312
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/RNN_finetuned_3eps_v2/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
# The data_folder is needed because we train the LM on the training
# transcriptions of Switchboard and Fisher as well.
# Set the local path to the Switchboard dataset (e.g. /nfs/data/swbd) here.
data_folder: !PLACEHOLDER
splits: ["train", "dev"]
split_ratio: [99, 1]
add_fisher_corpus: True
# Maximum number of times the same utterance is allowed to appear
# in the training data
max_utt: 300
skip_prep: False
# train_lm.csv is the one that is created, when the Fisher
# corpus is included in the preparation procedure
train_csv: !ref <save_folder>/train_lm.csv
valid_csv: !ref <save_folder>/dev.csv
test_csv: !ref <save_folder>/test.csv

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
pretrained_path: speechbrain/asr-crdnn-rnnlm-librispeech


# Training parameters
number_of_epochs: 5
batch_size: 80
lr: 0.0001
accu_steps: 3 # Gradient accumulation to simulate large batch training
ckpt_interval_minutes: 15 # save checkpoint every N min

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

# Model parameters
emb_size: 128
activation: !name:torch.nn.LeakyReLU
dropout: 0.0
rnn_layers: 2
rnn_neurons: 2048
dnn_blocks: 1
dnn_neurons: 512

# Outputs
output_neurons: 1000 # index(blank/eos/bos) = 0
# blank_index: 0
bos_index: 0
eos_index: 0


# Functions
model: !new:speechbrain.lobes.models.RNNLM.RNNLM
    output_neurons: !ref <output_neurons>
    embedding_dim: !ref <emb_size>
    activation: !ref <activation>
    dropout: !ref <dropout>
    rnn_layers: !ref <rnn_layers>
    rnn_neurons: !ref <rnn_neurons>
    dnn_blocks: !ref <dnn_blocks>
    dnn_neurons: !ref <dnn_neurons>

modules:
    model: !ref <model>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        scheduler: !ref <lr_annealing>
        counter: !ref <epoch_counter>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
    betas: (0.9, 0.98)
    eps: 0.000000001

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

compute_cost: !name:speechbrain.nnet.losses.nll_loss

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

tokenizer: !new:sentencepiece.SentencePieceProcessor

# This object is used to load a pretrained language model and tokenizer
# (defined above).
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        model: !ref <model>
        tokenizer: !ref <tokenizer>
    paths:
        model: !ref <pretrained_path>/lm.ckpt
        tokenizer: !ref <pretrained_path>/tokenizer.ckpt
