[global]
    feature_computations=$feature_computations
    neural_block_computations=$neural_block_computations
[/global]

[functions]    
	    

    	[compute_features]
    	    class_name=speechbrain.core.execute_computations 
            cfg_file=$feature_computations
     	    torch_no_grad=True
    	[/compute_features]

    	[mean_var_norm]
    	    class_name=speechbrain.processing.features.mean_var_norm
    	    norm_type=speaker
            torch_no_grad=True
    	[/mean_var_norm]

    	[nnet]
    	    class_name=speechbrain.core.execute_computations
            cfg_file=$neural_block_computations
            out_var=out
            replicate=5
    	[/nnet]

    	[lin]
    		class_name=speechbrain.nnet.architectures.linear
    		n_neurons=1973
    		bias=False
    	[/lin]

    	[batch_n]
    		class_name=speechbrain.nnet.normalization.normalize
            norm_type = batchnorm
    	[/batch_n]

    	[softmax]
    		class_name=speechbrain.nnet.architectures.activation
    		act_type=log_softmax
    	[/softmax]

    	[compute_cost]
    	    class_name=speechbrain.nnet.losses.compute_cost
    	    cost_type=nll,error
    	    avoid_pad=False,False
    	[/compute_cost]

    	[optimizer]
    	    class_name=speechbrain.nnet.optimizers.optimize
    	    recovery=True
    	    optimizer_type=adam
    	    learning_rate=$lr
    	[/optimizer]

    	[normalize_posteriors]
    	    class_name=speechbrain.nnet.normalization.normalize_posteriors
    	    count_lab=kaldi_lab
    	[/normalize_posteriors]

    	[save_posteriors]
    	    class_name=speechbrain.data_io.data_io.save
    	    save_format=ark
            save_folder = $posterior_save_folder
    	    transpose = True
    	[/save_posteriors]

[/functions]


[computations]
 
    id,wav,wav_len,kaldi_lab,kaldi_lab_len,spk_id,spk_id_len,batch_id,loop_id,mode,*_=get_input_var()

    feats=compute_features(wav)

    feats = mean_var_norm(feats,wav_len,spk_id)
  
    out = nnet(feats)
    out = lin(out)
    out = batch_n(out)
    pout = softmax(out)
    
    if mode == 'test':
        pout_norm=normalize_posteriors(pout)
        save_posteriors(pout_norm,id,wav_len)
    
    loss,error=compute_cost(pout,kaldi_lab,kaldi_lab_len)

    if mode == 'train':
        loss.backward()
        optimizer(nnet,lin,batch_n)

[/computations]



