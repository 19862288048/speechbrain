[global]
    
    # csv files
    csv_train=$csv_train
    csv_valid=$csv_valid
    csv_test=$csv_test
    
    # Trainig parameters
    N_batch_tr=$N_batch_tr

    # Valid parameters
    N_batch_valid=$N_batch_valid

    # Computations
    neural_computations=$neural_computations

    # Learning rate
    lr=$lr

[/global]

[functions]    
	    
    	[training_loop]
	    class_name=speechbrain.core.execute_computations
            cfg_file=$neural_computations
	    csv_file=$csv_train
            csv_read=wav,phn
	    batch_size=$N_batch
	    sentence_sorting=ascending
	    stop_at=optimizer
	    out_var=loss
	    accum_type=average
            eval_mode=False
            progress_bar=True
    	[/training_loop]

    	[validation_loop]
	    class_name=speechbrain.core.execute_computations
            cfg_file=$neural_computations
	    csv_file=$csv_valid
            csv_read=wav,phn
	    batch_size=$N_batch
	    sentence_sorting=ascending
	    stop_at=loss
	    out_var=loss, wer
	    accum_type=average, average
	    torch_no_grad=True
            eval_mode=True
            progress_bar=True
    	[/validation_loop]

    	[lr_annealing]
	    class_name=speechbrain.nnet.lr_scheduling.lr_annealing
	    annealing_type=newbob
	    N_epochs=$N_epochs
            lr_initial=$lr
            improvement_threshold=0.0025
            annealing_factor=0.8
            patient=0
    	[/lr_annealing]

    	[save_checkpoint]
	    class_name=speechbrain.data_io.data_io.save_ckpt
	    save_folder=$output_folder/nnets/
	    save_format=pkl
	    save_last=1
	    print = True
    	[/save_checkpoint]



[/functions]

[computations]
    
    epoch,*_=get_input_var()
    
    # Training Loop
    mode='train'
    avg_loss=training_loop(mode)

    # Validation Loop
    mode='valid'
    avg_loss_valid,avg_wer_valid=validation_loop(mode)

    # Perform learning rate annealing
    lr_annealing(epoch,avg_wer_valid) 
    
    # Saving checkpoint
    performance={'loss_tr': avg_loss, 'loss_valid': avg_loss_valid,  'wer_valid': avg_wer_valid}
    save_checkpoint(epoch,performance)

    
[/computations]


