[global]
	sample_rate=$sample_rate
	n_fft=400
	n_mels=23
	n_mfcc=20
	left_frames=5
	right_frames=5
	freeze=True
[/global]

[functions]

	[compute_STFT]
	    class_name=lib.processing.features.STFT
	    sample_rate=$sample_rate
	    win_length=25
	    hop_length=10
	    n_fft=$n_fft
	    window_type=hamming	
	[/compute_STFT]

	[compute_spectrogram]
	    class_name=lib.processing.features.spectrogram
	    power_spectrogram=2 	
	[/compute_spectrogram]

	[compute_fbanks]
	    class_name=lib.processing.features.FBANKs
            n_mels=$n_mels
	    log_mel=True
	    filter_shape=triangular
	    f_min=0
	    f_max=8000	      
            freeze=$freeze
	    n_fft=$n_fft 	
	[/compute_fbanks]

	[compute_mfccs]
	    class_name=lib.processing.features.MFCCs
	    n_mfcc=$n_mfcc
            n_mels=$n_mels
	    dct_norm=ortho       	
	[/compute_mfccs]

	[compute_deltas]
	    class_name=lib.processing.features.deltas
	    der_win_length=5
	[/compute_deltas]

	[context_window]
	    class_name=lib.processing.features.context_window
	    left_frames=$left_frames
	    right_frames=$right_frames
	[/context_window]

	[save]
	    class_name=data_lib.processing.save
	    save_format=pkl	
	[/save]


[/functions]


[computations]

	id,wav,*_=get_input_var()
	# mfcc computation pipeline
	STFT=compute_STFT(wav)
	spectr=compute_spectrogram(STFT)
	FBANKs=compute_fbanks(spectr)
        MFCCs=compute_mfccs(FBANKs)

	# computing derivatives
	delta1=compute_deltas(MFCCs)
	delta2=compute_deltas(delta1)

	# concatenate mfcc+delta1+delta2
	mfcc_with_deltas=torch.cat([MFCCs,delta1,delta2],dim=-2)

	# applying the context window
	mfcc_cw=context_window(mfcc_with_deltas)

[/computations]






